using System;
using System.Numerics;
using System.Runtime.InteropServices;
using System.Text;

namespace mwb_materials.MwbMats
{
    #region Enums

    public enum VTFLibOption
    {
        VTFLIB_DXT_QUALITY = 0,

        VTFLIB_LUMINANCE_WEIGHT_R,
        VTFLIB_LUMINANCE_WEIGHT_G,
        VTFLIB_LUMINANCE_WEIGHT_B,

        VTFLIB_BLUESCREEN_MASK_R,
        VTFLIB_BLUESCREEN_MASK_G,
        VTFLIB_BLUESCREEN_MASK_B,

        VTFLIB_BLUESCREEN_CLEAR_R,
        VTFLIB_BLUESCREEN_CLEAR_G,
        VTFLIB_BLUESCREEN_CLEAR_B,

        VTFLIB_FP16_HDR_KEY,
        VTFLIB_FP16_HDR_SHIFT,
        VTFLIB_FP16_HDR_GAMMA,

        VTFLIB_UNSHARPEN_RADIUS,
        VTFLIB_UNSHARPEN_AMOUNT,
        VTFLIB_UNSHARPEN_THRESHOLD,

        VTFLIB_XSHARPEN_STRENGTH,
        VTFLIB_XSHARPEN_THRESHOLD,

        VTFLIB_VMT_PARSE_MODE
    }
    public enum VTFImageFormat
    {
        IMAGE_FORMAT_RGBA8888 = 0,
        IMAGE_FORMAT_ABGR8888,
        IMAGE_FORMAT_RGB888,
        IMAGE_FORMAT_BGR888,
        IMAGE_FORMAT_RGB565,
        IMAGE_FORMAT_I8,
        IMAGE_FORMAT_IA88,
        IMAGE_FORMAT_P8,
        IMAGE_FORMAT_A8,
        IMAGE_FORMAT_RGB888_BLUESCREEN,
        IMAGE_FORMAT_BGR888_BLUESCREEN,
        IMAGE_FORMAT_ARGB8888,
        IMAGE_FORMAT_BGRA8888,
        IMAGE_FORMAT_DXT1,
        IMAGE_FORMAT_DXT3,
        IMAGE_FORMAT_DXT5,
        IMAGE_FORMAT_BGRX8888,
        IMAGE_FORMAT_BGR565,
        IMAGE_FORMAT_BGRX5551,
        IMAGE_FORMAT_BGRA4444,
        IMAGE_FORMAT_DXT1_ONEBITALPHA,
        IMAGE_FORMAT_BGRA5551,
        IMAGE_FORMAT_UV88,
        IMAGE_FORMAT_UVWQ8888,
        IMAGE_FORMAT_RGBA16161616F,
        IMAGE_FORMAT_RGBA16161616,
        IMAGE_FORMAT_UVLX8888,
        IMAGE_FORMAT_R32F,
        IMAGE_FORMAT_RGB323232F,
        IMAGE_FORMAT_RGBA32323232F,
        IMAGE_FORMAT_NV_DST16,
        IMAGE_FORMAT_NV_DST24,
        IMAGE_FORMAT_NV_INTZ,
        IMAGE_FORMAT_NV_RAWZ,
        IMAGE_FORMAT_ATI_DST16,
        IMAGE_FORMAT_ATI_DST24,
        IMAGE_FORMAT_NV_NULL,
        IMAGE_FORMAT_ATI2N,
        IMAGE_FORMAT_ATI1N,
        IMAGE_FORMAT_COUNT,
        IMAGE_FORMAT_NONE = -1
    }
    public enum VTFImageFlag : uint
    {
        TEXTUREFLAGS_POINTSAMPLE = 0x00000001,
        TEXTUREFLAGS_TRILINEAR = 0x00000002,
        TEXTUREFLAGS_CLAMPS = 0x00000004,
        TEXTUREFLAGS_CLAMPT = 0x00000008,
        TEXTUREFLAGS_ANISOTROPIC = 0x00000010,
        TEXTUREFLAGS_HINT_DXT5 = 0x00000020,
        TEXTUREFLAGS_SRGB = 0x00000040, // Originally internal to VTex as TEXTUREFLAGS_NOCOMPRESS.
        TEXTUREFLAGS_DEPRECATED_NOCOMPRESS = 0x00000040,
        TEXTUREFLAGS_NORMAL = 0x00000080,
        TEXTUREFLAGS_NOMIP = 0x00000100,
        TEXTUREFLAGS_NOLOD = 0x00000200,
        TEXTUREFLAGS_MINMIP = 0x00000400,
        TEXTUREFLAGS_PROCEDURAL = 0x00000800,
        TEXTUREFLAGS_ONEBITALPHA = 0x00001000, //!< Automatically generated by VTex.
        TEXTUREFLAGS_EIGHTBITALPHA = 0x00002000, //!< Automatically generated by VTex.
        TEXTUREFLAGS_ENVMAP = 0x00004000,
        TEXTUREFLAGS_RENDERTARGET = 0x00008000,
        TEXTUREFLAGS_DEPTHRENDERTARGET = 0x00010000,
        TEXTUREFLAGS_NODEBUGOVERRIDE = 0x00020000,
        TEXTUREFLAGS_SINGLECOPY = 0x00040000,
        TEXTUREFLAGS_UNUSED0 = 0x00080000, //!< Originally internal to VTex as TEXTUREFLAGS_ONEOVERMIPLEVELINALPHA.
        TEXTUREFLAGS_DEPRECATED_ONEOVERMIPLEVELINALPHA = 0x00080000,
        TEXTUREFLAGS_UNUSED1 = 0x00100000, //!< Originally internal to VTex as TEXTUREFLAGS_PREMULTCOLORBYONEOVERMIPLEVEL.
        TEXTUREFLAGS_DEPRECATED_PREMULTCOLORBYONEOVERMIPLEVEL = 0x00100000,
        TEXTUREFLAGS_UNUSED2 = 0x00200000, //!< Originally internal to VTex as TEXTUREFLAGS_NORMALTODUDV.
        TEXTUREFLAGS_DEPRECATED_NORMALTODUDV = 0x00200000,
        TEXTUREFLAGS_UNUSED3 = 0x00400000, //!< Originally internal to VTex as TEXTUREFLAGS_ALPHATESTMIPGENERATION.
        TEXTUREFLAGS_DEPRECATED_ALPHATESTMIPGENERATION = 0x00400000,
        TEXTUREFLAGS_NODEPTHBUFFER = 0x00800000,
        TEXTUREFLAGS_UNUSED4 = 0x01000000, //!< Originally internal to VTex as TEXTUREFLAGS_NICEFILTERED.
        TEXTUREFLAGS_DEPRECATED_NICEFILTERED = 0x01000000,
        TEXTUREFLAGS_CLAMPU = 0x02000000,
        TEXTUREFLAGS_VERTEXTEXTURE = 0x04000000,
        TEXTUREFLAGS_SSBUMP = 0x08000000,
        TEXTUREFLAGS_UNUSED5 = 0x10000000, //!< Originally TEXTUREFLAGS_UNFILTERABLE_OK.
        TEXTUREFLAGS_DEPRECATED_UNFILTERABLE_OK = 0x10000000,
        TEXTUREFLAGS_BORDER = 0x20000000,
        TEXTUREFLAGS_DEPRECATED_SPECVAR_RED = 0x40000000,
        TEXTUREFLAGS_DEPRECATED_SPECVAR_ALPHA = 0x80000000,
        TEXTUREFLAGS_LAST = 0x20000000,
        TEXTUREFLAGS_COUNT = 30
    }
    public enum VTFCubeMapFace
    {
        CUBEMAP_FACE_RIGHT = 0,     // +x
        CUBEMAP_FACE_LEFT,          // -x
        CUBEMAP_FACE_BACK,          // +y
        CUBEMAP_FACE_FRONT,         // -y
        CUBEMAP_FACE_UP,            // +z
        CUBEMAP_FACE_DOWN,          // -z
        CUBEMAP_FACE_SPHERE_MAP,        // fall back
        CUBEMAP_FACE_COUNT
    }
    public enum VTFMipmapFilter
    {
        MIPMAP_FILTER_POINT = 0,
        MIPMAP_FILTER_BOX,
        MIPMAP_FILTER_TRIANGLE,
        MIPMAP_FILTER_QUADRATIC,
        MIPMAP_FILTER_CUBIC,
        MIPMAP_FILTER_CATROM,
        MIPMAP_FILTER_MITCHELL,
        MIPMAP_FILTER_GAUSSIAN,
        MIPMAP_FILTER_SINC,
        MIPMAP_FILTER_BESSEL,
        MIPMAP_FILTER_HANNING,
        MIPMAP_FILTER_HAMMING,
        MIPMAP_FILTER_BLACKMAN,
        MIPMAP_FILTER_KAISER,
        MIPMAP_FILTER_COUNT
    }
    public enum VTFSharpenFilter
    {
        SHARPEN_FILTER_NONE = 0,
        SHARPEN_FILTER_NEGATIVE,
        SHARPEN_FILTER_LIGHTER,
        SHARPEN_FILTER_DARKER,
        SHARPEN_FILTER_CONTRASTMORE,
        SHARPEN_FILTER_CONTRASTLESS,
        SHARPEN_FILTER_SMOOTHEN,
        SHARPEN_FILTER_SHARPENSOFT,
        SHARPEN_FILTER_SHARPENMEDIUM,
        SHARPEN_FILTER_SHARPENSTRONG,
        SHARPEN_FILTER_FINDEDGES,
        SHARPEN_FILTER_CONTOUR,
        SHARPEN_FILTER_EDGEDETECT,
        SHARPEN_FILTER_EDGEDETECTSOFT,
        SHARPEN_FILTER_EMBOSS,
        SHARPEN_FILTER_MEANREMOVAL,
        SHARPEN_FILTER_UNSHARP,
        SHARPEN_FILTER_XSHARPEN,
        SHARPEN_FILTER_WARPSHARP,
        SHARPEN_FILTER_COUNT
    }
    public enum VTFDXTQuality
    {
        DXT_QUALITY_LOW = 0,
        DXT_QUALITY_MEDIUM,
        DXT_QUALITY_HIGH,
        DXT_QUALITY_HIGHEST,
        DXT_QUALITY_COUNT
    }
    public enum VTFKernelFilter
    {
        KERNEL_FILTER_4X = 0,
        KERNEL_FILTER_3X3,
        KERNEL_FILTER_5X5,
        KERNEL_FILTER_7X7,
        KERNEL_FILTER_9X9,
        KERNEL_FILTER_DUDV,
        KERNEL_FILTER_COUNT
    }
    public enum VTFHeightConversionMethod
    {
        HEIGHT_CONVERSION_METHOD_ALPHA = 0,
        HEIGHT_CONVERSION_METHOD_AVERAGE_RGB,
        HEIGHT_CONVERSION_METHOD_BIASED_RGB,
        HEIGHT_CONVERSION_METHOD_RED,
        HEIGHT_CONVERSION_METHOD_GREEN,
        HEIGHT_CONVERSION_METHOD_BLUE,
        HEIGHT_CONVERSION_METHOD_MAX_RGB,
        HEIGHT_CONVERSION_METHOD_COLORSPACE,
        //HEIGHT_CONVERSION_METHOD_NORMALIZE,
        HEIGHT_CONVERSION_METHOD_COUNT
    }
    public enum VTFNormalAlphaResult
    {
        NORMAL_ALPHA_RESULT_NOCHANGE = 0,
        NORMAL_ALPHA_RESULT_HEIGHT,
        NORMAL_ALPHA_RESULT_BLACK,
        NORMAL_ALPHA_RESULT_WHITE,
        NORMAL_ALPHA_RESULT_COUNT
    }
    public enum VTFResizeMethod
    {
        RESIZE_NEAREST_POWER2 = 0,
        RESIZE_BIGGEST_POWER2,
        RESIZE_SMALLEST_POWER2,
        RESIZE_SET,
        RESIZE_COUNT
    }

    public enum VTFResourceEntryTypeFlag
    {
        RSRCF_HAS_NO_DATA_CHUNK = 0x02
    }

    public enum VMTParseMode
    {
        PARSE_MODE_STRICT = 0,
        PARSE_MODE_LOOSE,
        PARSE_MODE_COUNT
    }

    public enum VMTNodeType
    {
        NODE_TYPE_GROUP = 0,
        NODE_TYPE_GROUP_END,
        NODE_TYPE_STRING,
        NODE_TYPE_INTEGER,
        NODE_TYPE_SINGLE,
        NODE_TYPE_COUNT
    }

    #endregion

    #region Structs
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public unsafe struct SVTFImageFormatInfo
    {
        IntPtr lpName;                 //!< Enumeration text equivalent.
        uint uiBitsPerPixel;          //!< Format bits per pixel.
        uint uiBytesPerPixel;     //!< Format bytes per pixel.
        uint uiRedBitsPerPixel;       //!< Format red bits per pixel.  0 for N/A.
        uint uiGreenBitsPerPixel; //!< Format green bits per pixel.  0 for N/A.
        uint uiBlueBitsPerPixel;      //!< Format blue bits per pixel.  0 for N/A.
        uint uiAlphaBitsPerPixel; //!< Format alpha bits per pixel.  0 for N/A.
        bool bIsCompressed;           //!< Format is compressed (DXT).
        bool bIsSupported;            //!< Format is supported by VTFLib.
    }
    [StructLayout(LayoutKind.Sequential, Pack = 1)]
    public unsafe struct SVTFCreateOptions
    {
        public Vector2 uiVersion;                               
        public VTFImageFormat ImageFormat;     
        public uint uiFlags;                                    
        public uint uiStartFrame;                               
        public float sBumpScale;
        public Vector3 sReflectivity;
        public bool bMipmaps;                                   
        public VTFMipmapFilter MipmapFilter;                    
        public VTFSharpenFilter MipmapSharpenFilter; 
        public bool bThumbnail;                                 
        public bool bReflectivity;     
        public bool bResize;                                    
        public VTFResizeMethod ResizeMethod;                    
        public VTFMipmapFilter ResizeFilter;                    
        public VTFSharpenFilter ResizeSharpenFilter;            
        public uint uiResizeWidth;                              
        public uint uiResizeHeight;    
        public bool bResizeClamp;                               
        public uint uiResizeClampWidth;                         
        public uint uiResizeClampHeight;   
        public bool bGammaCorrection;                           
        public float sGammaCorrection;     
        public bool bNormalMap;                                 
        public VTFKernelFilter KernelFilter;                    
        public VTFHeightConversionMethod HeightConversionMethod;
        public VTFNormalAlphaResult NormalAlphaResult;          
        public byte bNormalMinimumZ;                            
        public float sNormalScale;                              
        public bool bNormalWrap;                                
        public bool bNormalInvertX;                             
        public bool bNormalInvertY;                             
        public bool bNormalInvertZ; 
        public bool bSphereMap;                                 
    }

    public unsafe struct SVTFTextureLODControlResource
    {
        byte ResolutionClampU;
        byte ResolutionClampV;
        ushort Padding;
    }

    public enum VLProc
    {
        PROC_READ_CLOSE = 0,
        PROC_READ_OPEN,
        PROC_READ_READ,
        PROC_READ_SEEK,
        PROC_READ_TELL,
        PROC_READ_SIZE,
        PROC_WRITE_CLOSE,
        PROC_WRITE_OPEN,
        PROC_WRITE_WRITE,
        PROC_WRITE_SEEK,
        PROC_WRITE_SIZE,
        PROC_WRITE_TELL,
        PROC_COUNT
    }

    public enum VLSeekMode
    {
        SEEK_MODE_BEGIN = 0,
        SEEK_MODE_CURRENT,
        SEEK_MODE_END
    }

    //public void(*PReadCloseProc)(IntPtr);
    //public bool(*PReadOpenProc)(IntPtr);
    //public uint(*PReadReadProc)(IntPtr, uint, IntPtr);
    //public uint(*PReadSeekProc)(long, VLSeekMode, IntPtr);
    //public uint(*PReadSizeProc)(IntPtr);
    //public uint(*PReadTellProc)(IntPtr);
    //
    //public void(*PWriteCloseProc)(IntPtr);
    //public bool(*PWriteOpenProc)(IntPtr);
    //public uint(*PWriteWriteProc)(IntPtr, uint, IntPtr);
    //public uint(*PWriteSeekProc)(long, VLSeekMode, IntPtr);
    //public uint(*PWriteSizeProc)(IntPtr);
    //public uint(*PWriteTellProc)(IntPtr);
    #endregion

    public unsafe class VtfLib
    {
        [DllImport("VTFLib_x64.dll")] public extern static uint vlGetVersion();
        [DllImport("VTFLib_x64.dll")] public extern static IntPtr vlGetVersionString();
        [DllImport("VTFLib_x64.dll")] public extern static IntPtr vlGetLastError();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlInitialize();
        [DllImport("VTFLib_x64.dll")] public extern static void vlShutdown();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlGetBoolean(VTFLibOption Option);
        [DllImport("VTFLib_x64.dll")] public extern static void vlSetBoolean(VTFLibOption Option, bool bValue);
        [DllImport("VTFLib_x64.dll")] public extern static int vlGetInteger(VTFLibOption Option);
        [DllImport("VTFLib_x64.dll")] public extern static void vlSetInteger(VTFLibOption Option, int iValue);
        [DllImport("VTFLib_x64.dll")] public extern static float vlGetFloat(VTFLibOption Option);
        [DllImport("VTFLib_x64.dll")] public extern static void vlSetFloat(VTFLibOption Option, float sValue);
        [DllImport("VTFLib_x64.dll")] public extern static void vlSetProc(VLProc Proc, IntPtr pProc);
        [DllImport("VTFLib_x64.dll")] public extern static IntPtr vlGetProc(VLProc Proc);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageIsBound();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlBindImage(uint uiImage);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlCreateImage(IntPtr uiImage);
        [DllImport("VTFLib_x64.dll")] public extern static void vlDeleteImage(uint uiImage);
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageCreateDefaultCreateStructure([MarshalAs(UnmanagedType.LPStruct)] IntPtr VTFCreateOptions);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageCreate(uint uiWidth, uint uiHeight, uint uiFrames, uint uiFaces, uint uiSlices, VTFImageFormat ImageFormat, bool bThumbnail, bool bMipmaps, bool bNullImageData);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageCreateSingle(uint uiWidth, uint uiHeight, IntPtr lpImageDataRGBA8888, IntPtr VTFCreateOptions);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageCreateMultiple(uint uiWidth, uint uiHeight, uint uiFrames, uint uiFaces, uint uiSlices, IntPtr lpImageDataRGBA8888, IntPtr VTFCreateOptions);
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageDestroy();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageIsLoaded();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageLoad([MarshalAs(UnmanagedType.LPStr)] string cFileName, bool bHeaderOnly);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageLoadLump(IntPtr lpData, uint uiBufferSize, bool bHeaderOnly);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageLoadProc(IntPtr pUserData, bool bHeaderOnly);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageSave([MarshalAs(UnmanagedType.LPStr)] string cFileName);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageSaveLump(IntPtr lpData, uint uiBufferSize, IntPtr uiSize);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageSaveProc(IntPtr pUserData);
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetHasImage();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetMajorVersion();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetMinorVersion();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetSize();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetWidth();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetHeight();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetDepth();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetFrameCount();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetFaceCount();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetMipmapCount();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetStartFrame();
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageSetStartFrame(uint uiStartFrame);
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetFlags();
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageSetFlags(uint uiFlags);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageGetFlag(VTFImageFlag ImageFlag);
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageSetFlag(VTFImageFlag ImageFlag, bool bState);
        [DllImport("VTFLib_x64.dll")] public extern static float vlImageGetBumpmapScale();
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageSetBumpmapScale(float sBumpmapScale);
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageGetReflectivity(IntPtr sX, IntPtr sY, IntPtr sZ);
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageSetReflectivity(float sX, float sY, float sZ);
        [DllImport("VTFLib_x64.dll")] public extern static VTFImageFormat vlImageGetFormat();
        [DllImport("VTFLib_x64.dll")] public extern static IntPtr vlImageGetData(uint uiFrame, uint uiFace, uint uiSlice, uint uiMipmapLevel);
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageSetData(uint uiFrame, uint uiFace, uint uiSlice, uint uiMipmapLevel, IntPtr lpData);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageGetHasThumbnail();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetThumbnailWidth();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetThumbnailHeight();
        [DllImport("VTFLib_x64.dll")] public extern static VTFImageFormat vlImageGetThumbnailFormat();
        [DllImport("VTFLib_x64.dll")] public extern static IntPtr vlImageGetThumbnailData();
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageSetThumbnailData(IntPtr lpData);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageGetSupportsResources();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetResourceCount();
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageGetResourceType(uint uiIndex);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageGetHasResource(uint uiType);
        [DllImport("VTFLib_x64.dll")] public extern static IntPtr vlImageGetResourceData(uint uiType, IntPtr uiSize);
        [DllImport("VTFLib_x64.dll")] public extern static IntPtr vlImageSetResourceData(uint uiType, uint uiSize, IntPtr lpData);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageGenerateMipmaps(uint uiFace, uint uiFrame, VTFMipmapFilter MipmapFilter, VTFSharpenFilter SharpenFilter);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageGenerateAllMipmaps(VTFMipmapFilter MipmapFilter, VTFSharpenFilter SharpenFilter);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageGenerateThumbnail();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageGenerateNormalMap(uint uiFrame, VTFKernelFilter KernelFilter, VTFHeightConversionMethod HeightConversionMethod, VTFNormalAlphaResult NormalAlphaResult);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageGenerateAllNormalMaps(VTFKernelFilter KernelFilter, VTFHeightConversionMethod HeightConversionMethod, VTFNormalAlphaResult NormalAlphaResult);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageGenerateSphereMap();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageComputeReflectivity();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageGetImageFormatInfoEx(VTFImageFormat ImageFormat, [MarshalAs(UnmanagedType.LPStruct)] SVTFImageFormatInfo* VTFImageFormatInfo);
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageComputeImageSize(uint uiWidth, uint uiHeight, uint uiDepth, uint uiMipmaps, VTFImageFormat ImageFormat);
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageComputeMipmapCount(uint uiWidth, uint uiHeight, uint uiDepth);
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageComputeMipmapDimensions(uint uiWidth, uint uiHeight, uint uiDepth, uint uiMipmapLevel, IntPtr uiMipmapWidth, IntPtr uiMipmapHeight, IntPtr uiMipmapDepth);
        [DllImport("VTFLib_x64.dll")] public extern static uint vlImageComputeMipmapSize(uint uiWidth, uint uiHeight, uint uiDepth, uint uiMipmapLevel, VTFImageFormat ImageFormat);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageConvertToRGBA8888(IntPtr lpSource, IntPtr lpDest, uint uiWidth, uint uiHeight, VTFImageFormat SourceFormat);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageConvertFromRGBA8888(IntPtr lpSource, IntPtr lpDest, uint uiWidth, uint uiHeight, VTFImageFormat DestFormat);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageConvert(IntPtr lpSource, IntPtr lpDest, uint uiWidth, uint uiHeight, VTFImageFormat SourceFormat, VTFImageFormat DestFormat);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageConvertToNormalMap(IntPtr lpSourceRGBA8888, IntPtr lpDestRGBA8888, uint uiWidth, uint uiHeight, VTFKernelFilter KernelFilter, VTFHeightConversionMethod HeightConversionMethod, VTFNormalAlphaResult NormalAlphaResult, byte bMinimumZ, float sScale, bool bWrap, bool bInvertX, bool bInvertY);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlImageResize(IntPtr lpSourceRGBA8888, IntPtr lpDestRGBA8888, uint uiSourceWidth, uint uiSourceHeight, uint uiDestWidth, uint uiDestHeight, VTFMipmapFilter ResizeFilter, VTFSharpenFilter SharpenFilter);
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageCorrectImageGamma(IntPtr lpImageDataRGBA8888, uint uiWidth, uint uiHeight, float sGammaCorrection);
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageComputeImageReflectivity(IntPtr lpImageDataRGBA8888, uint uiWidth, uint uiHeight, IntPtr sX, IntPtr sY, IntPtr sZ);
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageFlipImage(IntPtr lpImageDataRGBA8888, uint uiWidth, uint uiHeight);
        [DllImport("VTFLib_x64.dll")] public extern static void vlImageMirrorImage(IntPtr lpImageDataRGBA8888, uint uiWidth, uint uiHeight);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialIsBound();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlBindMaterial(uint uiMaterial);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlCreateMaterial(IntPtr uiMaterial);
        [DllImport("VTFLib_x64.dll")] public extern static void vlDeleteMaterial(uint uiMaterial);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialCreate(IntPtr cRoot);
        [DllImport("VTFLib_x64.dll")] public extern static void vlMaterialDestroy();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialIsLoaded();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialLoad(IntPtr cFileName);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialLoadLump(IntPtr lpData, uint uiBufferSize);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialLoadProc(IntPtr pUserData);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialSave(IntPtr cFileName);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialSaveLump(IntPtr lpData, uint uiBufferSize, IntPtr uiSize);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialSaveProc(IntPtr pUserData);
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialGetFirstNode();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialGetLastNode();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialGetNextNode();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialGetPreviousNode();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialGetParentNode();
        [DllImport("VTFLib_x64.dll")] public extern static bool vlMaterialGetChildNode(IntPtr cName);
        [DllImport("VTFLib_x64.dll")] public extern static IntPtr vlMaterialGetNodeName();
        [DllImport("VTFLib_x64.dll")] public extern static void vlMaterialSetNodeName(IntPtr cName);
        [DllImport("VTFLib_x64.dll")] public extern static VMTNodeType vlMaterialGetNodeType();
        [DllImport("VTFLib_x64.dll")] public extern static IntPtr vlMaterialGetNodeString();
        [DllImport("VTFLib_x64.dll")] public extern static void vlMaterialSetNodeString(IntPtr cValue);
        [DllImport("VTFLib_x64.dll")] public extern static uint vlMaterialGetNodeInteger();
        [DllImport("VTFLib_x64.dll")] public extern static void vlMaterialSetNodeInteger(uint iValue);
        [DllImport("VTFLib_x64.dll")] public extern static float vlMaterialGetNodeSingle();
        [DllImport("VTFLib_x64.dll")] public extern static void vlMaterialSetNodeSingle(float sValue);
        [DllImport("VTFLib_x64.dll")] public extern static void vlMaterialAddNodeGroup(IntPtr cName);
        [DllImport("VTFLib_x64.dll")] public extern static void vlMaterialAddNodeString(IntPtr cName, IntPtr cValue);
        [DllImport("VTFLib_x64.dll")] public extern static void vlMaterialAddNodeInteger(IntPtr cName, uint iValue);
        [DllImport("VTFLib_x64.dll")] public extern static void vlMaterialAddNodeSingle(IntPtr cName, float sValue);

    }
}
